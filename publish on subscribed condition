/*
 * Micro-ROS code that subscribes to a Float32 message on topic /micro_ros_arduino_subscriber 
 * If subscriber receives a value of 1, LED on microcontroller is turned off and the number 42 is published on topic /Float32_publisher
 * If subscriber receives a value of 2, LED on microcontroller is turned off and the number 3.14 is published on topic /Float32_publisher
 * Thanks to Jason Bowling for example code from a Pi Pico. 
 * Code below tested on a Teensy 4.1
 * ROS2 Humble on Ubuntu 22.02
 * Please do not use this code on any life critical tasks, other than that, you are free to use.
 * 
 */

#include <micro_ros_arduino.h>
#include <stdio.h>
#include <rcl/rcl.h>
#include <rcl/error_handling.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <std_msgs/msg/float32.h>

#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){error_loop();}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){}}

rcl_subscription_t subscriber;
rcl_publisher_t publisher;
std_msgs__msg__Float32 msg;
std_msgs__msg__Float32 send_msg;
std_msgs__msg__Float32 recv_msg;

rclc_executor_t executor;
rclc_support_t support;
rcl_allocator_t allocator;
rcl_node_t node;
rcl_timer_t timer;

#define LED_PIN 13

#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){error_loop();}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){}}


void error_loop(){
  while(1){
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
    delay(100);
  }
}

void timer_callback(rcl_timer_t *timer, int64_t last_call_time)
{
    rcl_ret_t ret = rcl_publish(&publisher, &send_msg, NULL);
}


void subscription_callback(const void * msgin)
{  
  const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
}



void setup() {
  set_microros_transports();
  
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);  
  
  delay(2000);

  allocator = rcl_get_default_allocator();

  //create init_options
  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));

  // create node
  RCCHECK(rclc_node_init_default(&node, "micro_ros_arduino_node", "", &support));
  
  
  // create publisher
  rclc_publisher_init_default(
  &publisher,
  &node,
  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
  "Float32_publisher");
  
  // create subscriber
  RCCHECK(rclc_subscription_init_default(
    &subscriber,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
    "micro_ros_arduino_subscriber"));
  
  //create timer, point at callback function above
  rclc_timer_init_default(
    &timer,
    &support,
    RCL_MS_TO_NS(1000),
    timer_callback);

  RCCHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
  rclc_executor_add_timer(&executor, &timer);
  RCCHECK(rclc_executor_add_subscription(&executor, &subscriber, &msg, &subscription_callback, ON_NEW_DATA));
}

void loop() {
  delay(100);
  RCCHECK(rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100)));

  rcl_timer_t timer;
  rcl_node_t node;
  rcl_allocator_t allocator;
  rclc_support_t support;
  rclc_executor_t executor;
  
  if (msg.data==1)
  {
    digitalWrite(LED_PIN, LOW);  
    send_msg.data = 42; 
  }
  
  if (msg.data==2)
  {
    digitalWrite(LED_PIN, HIGH);  
    send_msg.data = 3.14;
  }
}
